// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// armaExpmat
arma::mat armaExpmat(arma::mat m);
RcppExport SEXP _regCtsem_armaExpmat(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(armaExpmat(m));
    return rcpp_result_gen;
END_RCPP
}
// computeDRIFTHASH
arma::mat computeDRIFTHASH(arma::mat DRIFTValues);
RcppExport SEXP _regCtsem_computeDRIFTHASH(SEXP DRIFTValuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type DRIFTValues(DRIFTValuesSEXP);
    rcpp_result_gen = Rcpp::wrap(computeDRIFTHASH(DRIFTValues));
    return rcpp_result_gen;
END_RCPP
}
// computeDRIFTHASHExponentials
Rcpp::List computeDRIFTHASHExponentials(arma::mat DRIFTHASH, Rcpp::List DRIFTHASHExponentialUnique);
RcppExport SEXP _regCtsem_computeDRIFTHASHExponentials(SEXP DRIFTHASHSEXP, SEXP DRIFTHASHExponentialUniqueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type DRIFTHASH(DRIFTHASHSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type DRIFTHASHExponentialUnique(DRIFTHASHExponentialUniqueSEXP);
    rcpp_result_gen = Rcpp::wrap(computeDRIFTHASHExponentials(DRIFTHASH, DRIFTHASHExponentialUnique));
    return rcpp_result_gen;
END_RCPP
}
// computeDiscreteCINTs
Rcpp::List computeDiscreteCINTs(Rcpp::List discreteCINTUnique, arma::mat DRIFTInverseValues, Rcpp::List discreteDRIFTUnique, arma::colvec CINTValues);
RcppExport SEXP _regCtsem_computeDiscreteCINTs(SEXP discreteCINTUniqueSEXP, SEXP DRIFTInverseValuesSEXP, SEXP discreteDRIFTUniqueSEXP, SEXP CINTValuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteCINTUnique(discreteCINTUniqueSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type DRIFTInverseValues(DRIFTInverseValuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteDRIFTUnique(discreteDRIFTUniqueSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type CINTValues(CINTValuesSEXP);
    rcpp_result_gen = Rcpp::wrap(computeDiscreteCINTs(discreteCINTUnique, DRIFTInverseValues, discreteDRIFTUnique, CINTValues));
    return rcpp_result_gen;
END_RCPP
}
// computeDiscreteDIFFUSIONs
Rcpp::List computeDiscreteDIFFUSIONs(arma::mat DRIFTHASHInverse, arma::mat DIFFUSION, Rcpp::List DRIFTHASHExponentialUnique, Rcpp::List discreteDIFFUSIONUnique);
RcppExport SEXP _regCtsem_computeDiscreteDIFFUSIONs(SEXP DRIFTHASHInverseSEXP, SEXP DIFFUSIONSEXP, SEXP DRIFTHASHExponentialUniqueSEXP, SEXP discreteDIFFUSIONUniqueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type DRIFTHASHInverse(DRIFTHASHInverseSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type DIFFUSION(DIFFUSIONSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type DRIFTHASHExponentialUnique(DRIFTHASHExponentialUniqueSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteDIFFUSIONUnique(discreteDIFFUSIONUniqueSEXP);
    rcpp_result_gen = Rcpp::wrap(computeDiscreteDIFFUSIONs(DRIFTHASHInverse, DIFFUSION, DRIFTHASHExponentialUnique, discreteDIFFUSIONUnique));
    return rcpp_result_gen;
END_RCPP
}
// computeDiscreteDRIFTs
Rcpp::List computeDiscreteDRIFTs(arma::mat DRIFTValues, Rcpp::List discreteDRIFTUnique);
RcppExport SEXP _regCtsem_computeDiscreteDRIFTs(SEXP DRIFTValuesSEXP, SEXP discreteDRIFTUniqueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type DRIFTValues(DRIFTValuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteDRIFTUnique(discreteDRIFTUniqueSEXP);
    rcpp_result_gen = Rcpp::wrap(computeDiscreteDRIFTs(DRIFTValues, discreteDRIFTUnique));
    return rcpp_result_gen;
END_RCPP
}
// computeDiscreteTRAITs
Rcpp::List computeDiscreteTRAITs(Rcpp::List discreteDRIFTUnique, Rcpp::List discreteTRAITUnique);
RcppExport SEXP _regCtsem_computeDiscreteTRAITs(SEXP discreteDRIFTUniqueSEXP, SEXP discreteTRAITUniqueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteDRIFTUnique(discreteDRIFTUniqueSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteTRAITUnique(discreteTRAITUniqueSEXP);
    rcpp_result_gen = Rcpp::wrap(computeDiscreteTRAITs(discreteDRIFTUnique, discreteTRAITUnique));
    return rcpp_result_gen;
END_RCPP
}
// computeGroupM2LL
double computeGroupM2LL(int sampleSize, int nObservedVariables, arma::colvec observedMeans, arma::mat observedCov, arma::colvec expectedMeans, arma::mat expectedCovariance);
RcppExport SEXP _regCtsem_computeGroupM2LL(SEXP sampleSizeSEXP, SEXP nObservedVariablesSEXP, SEXP observedMeansSEXP, SEXP observedCovSEXP, SEXP expectedMeansSEXP, SEXP expectedCovarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP);
    Rcpp::traits::input_parameter< int >::type nObservedVariables(nObservedVariablesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type observedMeans(observedMeansSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type observedCov(observedCovSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type expectedMeans(expectedMeansSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type expectedCovariance(expectedCovarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(computeGroupM2LL(sampleSize, nObservedVariables, observedMeans, observedCov, expectedMeans, expectedCovariance));
    return rcpp_result_gen;
END_RCPP
}
// computeIndividualM2LL
double computeIndividualM2LL(int nObservedVariables, arma::colvec rawData, arma::colvec expectedMeans, arma::mat expectedCovariance);
RcppExport SEXP _regCtsem_computeIndividualM2LL(SEXP nObservedVariablesSEXP, SEXP rawDataSEXP, SEXP expectedMeansSEXP, SEXP expectedCovarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nObservedVariables(nObservedVariablesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type rawData(rawDataSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type expectedMeans(expectedMeansSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type expectedCovariance(expectedCovarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(computeIndividualM2LL(nObservedVariables, rawData, expectedMeans, expectedCovariance));
    return rcpp_result_gen;
END_RCPP
}
// computeKalmanLatentCovariancePrediction
arma::mat computeKalmanLatentCovariancePrediction(arma::mat discreteDRIFTValues, arma::mat previousCovariances, arma::mat discreteDIFFUSIONValues);
RcppExport SEXP _regCtsem_computeKalmanLatentCovariancePrediction(SEXP discreteDRIFTValuesSEXP, SEXP previousCovariancesSEXP, SEXP discreteDIFFUSIONValuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type discreteDRIFTValues(discreteDRIFTValuesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type previousCovariances(previousCovariancesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type discreteDIFFUSIONValues(discreteDIFFUSIONValuesSEXP);
    rcpp_result_gen = Rcpp::wrap(computeKalmanLatentCovariancePrediction(discreteDRIFTValues, previousCovariances, discreteDIFFUSIONValues));
    return rcpp_result_gen;
END_RCPP
}
// computeKalmanLatentStatePrediction
arma::colvec computeKalmanLatentStatePrediction(arma::mat discreteDRIFTValues, arma::colvec previousStates, arma::colvec discreteCINTValues);
RcppExport SEXP _regCtsem_computeKalmanLatentStatePrediction(SEXP discreteDRIFTValuesSEXP, SEXP previousStatesSEXP, SEXP discreteCINTValuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type discreteDRIFTValues(discreteDRIFTValuesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type previousStates(previousStatesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type discreteCINTValues(discreteCINTValuesSEXP);
    rcpp_result_gen = Rcpp::wrap(computeKalmanLatentStatePrediction(discreteDRIFTValues, previousStates, discreteCINTValues));
    return rcpp_result_gen;
END_RCPP
}
// computeKalmanManifestCovariancePrediction
arma::mat computeKalmanManifestCovariancePrediction(arma::mat LAMBDA, arma::mat predictedLatentCovariances, arma::mat currentMANIFESTVAR);
RcppExport SEXP _regCtsem_computeKalmanManifestCovariancePrediction(SEXP LAMBDASEXP, SEXP predictedLatentCovariancesSEXP, SEXP currentMANIFESTVARSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type LAMBDA(LAMBDASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type predictedLatentCovariances(predictedLatentCovariancesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type currentMANIFESTVAR(currentMANIFESTVARSEXP);
    rcpp_result_gen = Rcpp::wrap(computeKalmanManifestCovariancePrediction(LAMBDA, predictedLatentCovariances, currentMANIFESTVAR));
    return rcpp_result_gen;
END_RCPP
}
// computeKalmanManifestPrediction
arma::colvec computeKalmanManifestPrediction(arma::mat LAMBDAValues, arma::colvec predictedStates, arma::colvec MANIFESTMEANSValues);
RcppExport SEXP _regCtsem_computeKalmanManifestPrediction(SEXP LAMBDAValuesSEXP, SEXP predictedStatesSEXP, SEXP MANIFESTMEANSValuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type LAMBDAValues(LAMBDAValuesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type predictedStates(predictedStatesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type MANIFESTMEANSValues(MANIFESTMEANSValuesSEXP);
    rcpp_result_gen = Rcpp::wrap(computeKalmanManifestPrediction(LAMBDAValues, predictedStates, MANIFESTMEANSValues));
    return rcpp_result_gen;
END_RCPP
}
// computeRAMExpectedCovariance
arma::mat computeRAMExpectedCovariance(arma::mat F, arma::mat A, arma::mat S);
RcppExport SEXP _regCtsem_computeRAMExpectedCovariance(SEXP FSEXP, SEXP ASEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(computeRAMExpectedCovariance(F, A, S));
    return rcpp_result_gen;
END_RCPP
}
// computeRAMExpectedMeans
arma::mat computeRAMExpectedMeans(arma::mat F, arma::mat A, arma::colvec M);
RcppExport SEXP _regCtsem_computeRAMExpectedMeans(SEXP FSEXP, SEXP ASEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(computeRAMExpectedMeans(F, A, M));
    return rcpp_result_gen;
END_RCPP
}
// computeRAMM2LL
double computeRAMM2LL(Rcpp::List RAMdata, arma::colvec expectedMeans, arma::mat expectedCovariance);
RcppExport SEXP _regCtsem_computeRAMM2LL(SEXP RAMdataSEXP, SEXP expectedMeansSEXP, SEXP expectedCovarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type RAMdata(RAMdataSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type expectedMeans(expectedMeansSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type expectedCovariance(expectedCovarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(computeRAMM2LL(RAMdata, expectedMeans, expectedCovariance));
    return rcpp_result_gen;
END_RCPP
}
// deepCopyNumericVector
Rcpp::NumericVector deepCopyNumericVector(Rcpp::NumericVector x);
RcppExport SEXP _regCtsem_deepCopyNumericVector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deepCopyNumericVector(x));
    return rcpp_result_gen;
END_RCPP
}
// deepCopyNumericMatrix
Rcpp::NumericMatrix deepCopyNumericMatrix(Rcpp::NumericMatrix x);
RcppExport SEXP _regCtsem_deepCopyNumericMatrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deepCopyNumericMatrix(x));
    return rcpp_result_gen;
END_RCPP
}
// deepCopyStringVector
Rcpp::StringVector deepCopyStringVector(Rcpp::StringVector x);
RcppExport SEXP _regCtsem_deepCopyStringVector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deepCopyStringVector(x));
    return rcpp_result_gen;
END_RCPP
}
// deepCopyStringMatrix
Rcpp::StringMatrix deepCopyStringMatrix(Rcpp::StringMatrix x);
RcppExport SEXP _regCtsem_deepCopyStringMatrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deepCopyStringMatrix(x));
    return rcpp_result_gen;
END_RCPP
}
// deepCopyList
Rcpp::List deepCopyList(Rcpp::List x);
RcppExport SEXP _regCtsem_deepCopyList(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deepCopyList(x));
    return rcpp_result_gen;
END_RCPP
}
// deepCopyDataFrame
Rcpp::DataFrame deepCopyDataFrame(Rcpp::DataFrame x);
RcppExport SEXP _regCtsem_deepCopyDataFrame(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(deepCopyDataFrame(x));
    return rcpp_result_gen;
END_RCPP
}
// fillA
arma::mat fillA(arma::mat A, bool hasDiscreteDRIFTUnique, Rcpp::List discreteDRIFTUnique, bool hasDiscreteTRAITUnique, Rcpp::List discreteTRAITUnique, arma::mat LAMBDA, Rcpp::DataFrame AParameterIndicators);
RcppExport SEXP _regCtsem_fillA(SEXP ASEXP, SEXP hasDiscreteDRIFTUniqueSEXP, SEXP discreteDRIFTUniqueSEXP, SEXP hasDiscreteTRAITUniqueSEXP, SEXP discreteTRAITUniqueSEXP, SEXP LAMBDASEXP, SEXP AParameterIndicatorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< bool >::type hasDiscreteDRIFTUnique(hasDiscreteDRIFTUniqueSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteDRIFTUnique(discreteDRIFTUniqueSEXP);
    Rcpp::traits::input_parameter< bool >::type hasDiscreteTRAITUnique(hasDiscreteTRAITUniqueSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteTRAITUnique(discreteTRAITUniqueSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LAMBDA(LAMBDASEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type AParameterIndicators(AParameterIndicatorsSEXP);
    rcpp_result_gen = Rcpp::wrap(fillA(A, hasDiscreteDRIFTUnique, discreteDRIFTUnique, hasDiscreteTRAITUnique, discreteTRAITUnique, LAMBDA, AParameterIndicators));
    return rcpp_result_gen;
END_RCPP
}
// fillM
arma::colvec fillM(arma::colvec M, arma::colvec T0MEANS, arma::colvec MANIFESTMEANS, bool hasDiscreteCINTUnique, Rcpp::List discreteCINTUnique, Rcpp::DataFrame cppMParameterIndicators);
RcppExport SEXP _regCtsem_fillM(SEXP MSEXP, SEXP T0MEANSSEXP, SEXP MANIFESTMEANSSEXP, SEXP hasDiscreteCINTUniqueSEXP, SEXP discreteCINTUniqueSEXP, SEXP cppMParameterIndicatorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type T0MEANS(T0MEANSSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type MANIFESTMEANS(MANIFESTMEANSSEXP);
    Rcpp::traits::input_parameter< bool >::type hasDiscreteCINTUnique(hasDiscreteCINTUniqueSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteCINTUnique(discreteCINTUniqueSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type cppMParameterIndicators(cppMParameterIndicatorsSEXP);
    rcpp_result_gen = Rcpp::wrap(fillM(M, T0MEANS, MANIFESTMEANS, hasDiscreteCINTUnique, discreteCINTUnique, cppMParameterIndicators));
    return rcpp_result_gen;
END_RCPP
}
// fillS
arma::mat fillS(arma::mat S, arma::mat T0VAR, arma::mat MANIFESTVAR, bool hasDiscreteTRAITUnique, arma::mat TRAITVAR, bool hasDiscreteDIFFUSIONUnique, Rcpp::List discreteDIFFUSIONUnique, Rcpp::DataFrame SParameterIndicators);
RcppExport SEXP _regCtsem_fillS(SEXP SSEXP, SEXP T0VARSEXP, SEXP MANIFESTVARSEXP, SEXP hasDiscreteTRAITUniqueSEXP, SEXP TRAITVARSEXP, SEXP hasDiscreteDIFFUSIONUniqueSEXP, SEXP discreteDIFFUSIONUniqueSEXP, SEXP SParameterIndicatorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type T0VAR(T0VARSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type MANIFESTVAR(MANIFESTVARSEXP);
    Rcpp::traits::input_parameter< bool >::type hasDiscreteTRAITUnique(hasDiscreteTRAITUniqueSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type TRAITVAR(TRAITVARSEXP);
    Rcpp::traits::input_parameter< bool >::type hasDiscreteDIFFUSIONUnique(hasDiscreteDIFFUSIONUniqueSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteDIFFUSIONUnique(discreteDIFFUSIONUniqueSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type SParameterIndicators(SParameterIndicatorsSEXP);
    rcpp_result_gen = Rcpp::wrap(fillS(S, T0VAR, MANIFESTVAR, hasDiscreteTRAITUnique, TRAITVAR, hasDiscreteDIFFUSIONUnique, discreteDIFFUSIONUnique, SParameterIndicators));
    return rcpp_result_gen;
END_RCPP
}
// getMatrixExponential
arma::mat getMatrixExponential(arma::mat mat);
RcppExport SEXP _regCtsem_getMatrixExponential(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(getMatrixExponential(mat));
    return rcpp_result_gen;
END_RCPP
}
// getVarianceFromVarianceBase
arma::mat getVarianceFromVarianceBase(arma::mat varianceBaseValues);
RcppExport SEXP _regCtsem_getVarianceFromVarianceBase(SEXP varianceBaseValuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type varianceBaseValues(varianceBaseValuesSEXP);
    rcpp_result_gen = Rcpp::wrap(getVarianceFromVarianceBase(varianceBaseValues));
    return rcpp_result_gen;
END_RCPP
}
// kalmanFit
arma::colvec kalmanFit(int sampleSize, int Tpoints, int nlatent, int nmanifest, arma::mat kalmanData, arma::mat& latentScores, arma::mat& predictedManifestValues, Rcpp::List discreteTimeParameterNames, arma::colvec T0MEANSValues, arma::mat T0VARValues, Rcpp::List discreteDRIFTUnique, Rcpp::List discreteCINTUnique, Rcpp::List discreteTRAITUnique, Rcpp::List discreteDIFFUSIONUnique, arma::mat LAMBDAValues, arma::colvec MANIFESTMEANSValues, arma::mat MANIFESTVARValues);
RcppExport SEXP _regCtsem_kalmanFit(SEXP sampleSizeSEXP, SEXP TpointsSEXP, SEXP nlatentSEXP, SEXP nmanifestSEXP, SEXP kalmanDataSEXP, SEXP latentScoresSEXP, SEXP predictedManifestValuesSEXP, SEXP discreteTimeParameterNamesSEXP, SEXP T0MEANSValuesSEXP, SEXP T0VARValuesSEXP, SEXP discreteDRIFTUniqueSEXP, SEXP discreteCINTUniqueSEXP, SEXP discreteTRAITUniqueSEXP, SEXP discreteDIFFUSIONUniqueSEXP, SEXP LAMBDAValuesSEXP, SEXP MANIFESTMEANSValuesSEXP, SEXP MANIFESTVARValuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP);
    Rcpp::traits::input_parameter< int >::type Tpoints(TpointsSEXP);
    Rcpp::traits::input_parameter< int >::type nlatent(nlatentSEXP);
    Rcpp::traits::input_parameter< int >::type nmanifest(nmanifestSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type kalmanData(kalmanDataSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type latentScores(latentScoresSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type predictedManifestValues(predictedManifestValuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteTimeParameterNames(discreteTimeParameterNamesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type T0MEANSValues(T0MEANSValuesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type T0VARValues(T0VARValuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteDRIFTUnique(discreteDRIFTUniqueSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteCINTUnique(discreteCINTUniqueSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteTRAITUnique(discreteTRAITUniqueSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type discreteDIFFUSIONUnique(discreteDIFFUSIONUniqueSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LAMBDAValues(LAMBDAValuesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type MANIFESTMEANSValues(MANIFESTMEANSValuesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type MANIFESTVARValues(MANIFESTVARValuesSEXP);
    rcpp_result_gen = Rcpp::wrap(kalmanFit(sampleSize, Tpoints, nlatent, nmanifest, kalmanData, latentScores, predictedManifestValues, discreteTimeParameterNames, T0MEANSValues, T0VARValues, discreteDRIFTUnique, discreteCINTUnique, discreteTRAITUnique, discreteDIFFUSIONUnique, LAMBDAValues, MANIFESTMEANSValues, MANIFESTVARValues));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_cpptsemKalmanModel_cpp();
RcppExport SEXP _rcpp_module_boot_cpptsemRAMmodel_cpp();

static const R_CallMethodDef CallEntries[] = {
    {"_regCtsem_armaExpmat", (DL_FUNC) &_regCtsem_armaExpmat, 1},
    {"_regCtsem_computeDRIFTHASH", (DL_FUNC) &_regCtsem_computeDRIFTHASH, 1},
    {"_regCtsem_computeDRIFTHASHExponentials", (DL_FUNC) &_regCtsem_computeDRIFTHASHExponentials, 2},
    {"_regCtsem_computeDiscreteCINTs", (DL_FUNC) &_regCtsem_computeDiscreteCINTs, 4},
    {"_regCtsem_computeDiscreteDIFFUSIONs", (DL_FUNC) &_regCtsem_computeDiscreteDIFFUSIONs, 4},
    {"_regCtsem_computeDiscreteDRIFTs", (DL_FUNC) &_regCtsem_computeDiscreteDRIFTs, 2},
    {"_regCtsem_computeDiscreteTRAITs", (DL_FUNC) &_regCtsem_computeDiscreteTRAITs, 2},
    {"_regCtsem_computeGroupM2LL", (DL_FUNC) &_regCtsem_computeGroupM2LL, 6},
    {"_regCtsem_computeIndividualM2LL", (DL_FUNC) &_regCtsem_computeIndividualM2LL, 4},
    {"_regCtsem_computeKalmanLatentCovariancePrediction", (DL_FUNC) &_regCtsem_computeKalmanLatentCovariancePrediction, 3},
    {"_regCtsem_computeKalmanLatentStatePrediction", (DL_FUNC) &_regCtsem_computeKalmanLatentStatePrediction, 3},
    {"_regCtsem_computeKalmanManifestCovariancePrediction", (DL_FUNC) &_regCtsem_computeKalmanManifestCovariancePrediction, 3},
    {"_regCtsem_computeKalmanManifestPrediction", (DL_FUNC) &_regCtsem_computeKalmanManifestPrediction, 3},
    {"_regCtsem_computeRAMExpectedCovariance", (DL_FUNC) &_regCtsem_computeRAMExpectedCovariance, 3},
    {"_regCtsem_computeRAMExpectedMeans", (DL_FUNC) &_regCtsem_computeRAMExpectedMeans, 3},
    {"_regCtsem_computeRAMM2LL", (DL_FUNC) &_regCtsem_computeRAMM2LL, 3},
    {"_regCtsem_deepCopyNumericVector", (DL_FUNC) &_regCtsem_deepCopyNumericVector, 1},
    {"_regCtsem_deepCopyNumericMatrix", (DL_FUNC) &_regCtsem_deepCopyNumericMatrix, 1},
    {"_regCtsem_deepCopyStringVector", (DL_FUNC) &_regCtsem_deepCopyStringVector, 1},
    {"_regCtsem_deepCopyStringMatrix", (DL_FUNC) &_regCtsem_deepCopyStringMatrix, 1},
    {"_regCtsem_deepCopyList", (DL_FUNC) &_regCtsem_deepCopyList, 1},
    {"_regCtsem_deepCopyDataFrame", (DL_FUNC) &_regCtsem_deepCopyDataFrame, 1},
    {"_regCtsem_fillA", (DL_FUNC) &_regCtsem_fillA, 7},
    {"_regCtsem_fillM", (DL_FUNC) &_regCtsem_fillM, 6},
    {"_regCtsem_fillS", (DL_FUNC) &_regCtsem_fillS, 8},
    {"_regCtsem_getMatrixExponential", (DL_FUNC) &_regCtsem_getMatrixExponential, 1},
    {"_regCtsem_getVarianceFromVarianceBase", (DL_FUNC) &_regCtsem_getVarianceFromVarianceBase, 1},
    {"_regCtsem_kalmanFit", (DL_FUNC) &_regCtsem_kalmanFit, 17},
    {"_rcpp_module_boot_cpptsemKalmanModel_cpp", (DL_FUNC) &_rcpp_module_boot_cpptsemKalmanModel_cpp, 0},
    {"_rcpp_module_boot_cpptsemRAMmodel_cpp", (DL_FUNC) &_rcpp_module_boot_cpptsemRAMmodel_cpp, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_regCtsem(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
